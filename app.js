// app.js - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appState = {
    currentScreen: 'loading',
    currentQuestion: 0,
    userAnswers: [],
    score: 0,
    startTime: null,
    endTime: null,
    userId: null,
    userName: '–ì–æ—Å—Ç—å',
    currentTest: null,
    availableTests: [],
    testCompleted: false,
    isAdmin: false
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
let resultsStorage = {
    users: [],
    results: [],
    adminKey: 'fencing2024'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async function() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    showScreen('loading');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK Bridge
        if (typeof vkBridge !== 'undefined') {
            await vkBridge.send('VKWebAppInit');
            getUserInfo();
        } else {
            generateGuestId();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
        await testLoader.init();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ù–ï –æ–±—É—á–∞—é—â–∏–µ)
        appState.availableTests = testLoader.getAvailableTests();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        loadResults();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞
        showScreen('test-selection');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        document.getElementById('loading-error').style.display = 'block';
        document.getElementById('loading-spinner').style.display = 'none';
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function getUserInfo() {
    if (typeof vkBridge !== 'undefined') {
        vkBridge.send('VKWebAppGetUserInfo')
            .then(userInfo => {
                appState.userId = userInfo.id;
                appState.userName = userInfo.first_name + ' ' + userInfo.last_name;
            })
            .catch(error => {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
                generateGuestId();
            });
    } else {
        generateGuestId();
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –≥–æ—Å—Ç—è
function generateGuestId() {
    appState.userId = 'guest_' + Math.random().toString(36).substr(2, 9);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ localStorage
function loadResults() {
    const saved = localStorage.getItem('fencingTestResults');
    if (saved) {
        resultsStorage = JSON.parse(saved);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ localStorage
function saveResults() {
    localStorage.setItem('fencingTestResults', JSON.stringify(resultsStorage));
}

// –í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞
async function selectTest(testId) {
    try {
        showScreen('loading');
        
        const test = await testLoader.loadTest(testId);
        if (test) {
            appState.currentTest = test;
            appState.testCompleted = false;
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            document.getElementById('welcome-test-title').textContent = test.title;
            document.getElementById('welcome-test-description').textContent = test.description;
            document.getElementById('welcome-test-difficulty').textContent = test.difficulty || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π';
            document.getElementById('welcome-test-duration').textContent = test.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            document.getElementById('welcome-test-questions').textContent = test.questions ? test.questions.length : 0;
            document.getElementById('welcome-test-author').textContent = test.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
            
            showScreen('welcome');
        } else {
            throw new Error('–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        showScreen('test-selection');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
async function refreshTests() {
    try {
        showScreen('loading');
        
        // –û—á–∏—â–∞–µ–º –∫–µ—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        await testLoader.refreshTests();
        
        appState.availableTests = testLoader.getAvailableTests();
        showScreen('test-selection');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤');
        showScreen('test-selection');
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ù–ï –æ–±—É—á–∞—é—â–∏–µ)
function fillTestSelection() {
    const container = document.getElementById('tests-container');
    container.innerHTML = '';
    
    // –î–≤–æ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
    const filteredTests = appState.availableTests.filter(test => 
        test.mode !== 'tutorial' && 
        !test.title.includes('–û–±—É—á–∞—é—â–∏–π') && 
        !test.description.includes('–æ–±—É—á–µ–Ω–∏—è')
    );
    
    if (filteredTests.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <h3>–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</p>
                <button class="vk-button" onclick="refreshTests()">–û–±–Ω–æ–≤–∏—Ç—å</button>
            </div>
        `;
        return;
    }
    
    filteredTests.forEach(test => {
        const testElement = document.createElement('div');
        testElement.className = 'test-card';
        
        const isLocal = test.isLocal;
        const isCustom = test.isCustom;
        const isBuiltIn = test.isBuiltIn;
        
        testElement.innerHTML = `
            <div class="test-card-header">
                <h3>${test.title}</h3>
                <div class="test-badges">
                    ${isLocal ? '<span class="test-badge local">–õ–æ–∫–∞–ª—å–Ω—ã–π</span>' : ''}
                    ${isCustom ? '<span class="test-badge custom">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π</span>' : ''}
                    ${isBuiltIn ? '<span class="test-badge local">–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π</span>' : ''}
                    <span class="test-difficulty ${test.difficulty ? test.difficulty.toLowerCase() : 'default'}">
                        ${test.difficulty || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'}
                    </span>
                </div>
            </div>
            <p class="test-description">${test.description}</p>
            <div class="test-meta">
                ${test.duration ? `<span class="test-meta-item">‚è± ${test.duration}</span>` : ''}
                ${test.totalQuestions ? `<span class="test-meta-item">‚ùì ${test.totalQuestions} –≤–æ–ø—Ä–æ—Å–æ–≤</span>` : ''}
                ${test.author ? `<span class="test-meta-item">üë§ ${test.author}</span>` : ''}
            </div>
            <div class="test-actions">
                <button class="vk-button" onclick="selectTest('${test.id}')">–í—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç</button>
                ${isCustom && appState.isAdmin ? `<button class="vk-button secondary small" onclick="removeCustomTest('${test.id}')">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
            </div>
        `;
        container.appendChild(testElement);
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
function removeCustomTest(testId) {
    if (!appState.isAdmin) {
        alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–µ—Å—Ç—ã!');
        return;
    }
    
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞?')) {
        testLoader.removeCustomTest(testId);
        appState.availableTests = appState.availableTests.filter(t => t.id !== testId);
        fillTestSelection();
    }
}

// –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
function startTest() {
    if (!appState.currentTest) return;
    
    appState.currentQuestion = 0;
    appState.userAnswers = [];
    appState.score = 0;
    appState.startTime = new Date();
    appState.testCompleted = false;
    
    showScreen('test');
    displayQuestion();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
function displayQuestion() {
    if (!appState.currentTest) return;
    
    const question = appState.currentTest.questions[appState.currentQuestion];
    const progress = ((appState.currentQuestion) / appState.currentTest.questions.length) * 100;
    
    document.getElementById('progress-fill').style.width = progress + '%';
    document.getElementById('progress-text').textContent = 
        `${appState.currentQuestion + 1}/${appState.currentTest.questions.length}`;
    
    document.getElementById('question-text').textContent = question.question;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    document.getElementById('explanation-container').style.display = 'none';
    
    const answersContainer = document.getElementById('answers-container');
    answersContainer.innerHTML = '';
    
    question.answers.forEach((answer, index) => {
        const answerElement = document.createElement('div');
        answerElement.className = 'answer-option';
        answerElement.innerHTML = `
            <div class="answer-text">${answer}</div>
        `;
        
        answerElement.addEventListener('click', () => selectAnswer(index));
        answersContainer.appendChild(answerElement);
    });
    
    document.getElementById('next-button').disabled = true;
    
    // –î–ª—è –æ–±—É—á–∞—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    if (appState.currentTest.mode === 'tutorial') {
        document.getElementById('next-button').textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏';
    } else {
        document.getElementById('next-button').textContent = '–î–∞–ª–µ–µ';
    }
}

// –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
function selectAnswer(answerIndex) {
    const question = appState.currentTest.questions[appState.currentQuestion];
    const answerOptions = document.querySelectorAll('.answer-option');
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—É—á–∞—é—â–∏–π —Ä–µ–∂–∏–º –∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
    if (appState.currentTest.mode === 'tutorial' && appState.userAnswers[appState.currentQuestion] !== undefined) {
        return;
    }
    
    answerOptions.forEach(option => {
        option.classList.remove('selected');
    });
    
    answerOptions[answerIndex].classList.add('selected');
    appState.userAnswers[appState.currentQuestion] = [answerIndex];
    
    // –í –æ–±—É—á–∞—é—â–µ–º —Ä–µ–∂–∏–º–µ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if (appState.currentTest.mode === 'tutorial') {
        checkAnswerInTutorialMode(answerIndex, question);
    } else {
        document.getElementById('next-button').disabled = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –æ–±—É—á–∞—é—â–µ–º —Ä–µ–∂–∏–º–µ - –ò–°–ü–†–ê–í–õ–ï–ù–ê
function checkAnswerInTutorialMode(userAnswer, question) {
    const answerOptions = document.querySelectorAll('.answer-option');
    const isCorrect = Array.isArray(question.correct) 
        ? question.correct.includes(userAnswer)
        : question.correct === userAnswer;
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    answerOptions.forEach((option, index) => {
        const isUserAnswer = index === userAnswer;
        const isRightAnswer = Array.isArray(question.correct) 
            ? question.correct.includes(index)
            : question.correct === index;
        
        if (isRightAnswer) {
            option.classList.add('correct');
        } else if (isUserAnswer && !isRightAnswer) {
            option.classList.add('incorrect');
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        option.classList.add('disabled');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    if (question.explanation) {
        document.getElementById('explanation-text').textContent = question.explanation;
        document.getElementById('explanation-container').style.display = 'block';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    if (isCorrect) {
        appState.score++;
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
    document.getElementById('next-button').disabled = false;
    document.getElementById('next-button').textContent = '–î–∞–ª–µ–µ';
}

// –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
function nextQuestion() {
    appState.currentQuestion++;
    
    if (appState.currentQuestion < appState.currentTest.questions.length) {
        displayQuestion();
    } else {
        finishTest();
    }
}

// –î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
function finishTestEarly() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç –¥–æ—Å—Ä–æ—á–Ω–æ? –í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.')) {
        finishTest();
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
function finishTest() {
    appState.endTime = new Date();
    appState.testCompleted = true;
    
    // –î–ª—è —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (appState.currentTest.mode === 'exam') {
        calculateScore();
    }
    
    const timeSpent = Math.round((appState.endTime - appState.startTime) / 1000);
    
    // –î–ª—è –æ–±—É—á–∞—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç = (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã / –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤) * 100
    let percentage;
    if (appState.currentTest.mode === 'tutorial') {
        percentage = Math.round((appState.score / appState.currentTest.questions.length) * 100);
    } else {
        percentage = Math.round((appState.score / appState.currentTest.questions.length) * 100);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
    if (appState.currentTest.mode === 'exam') {
        saveTestResult(appState.score, percentage, timeSpent);
    }
    
    showResults(percentage, timeSpent);
}

// –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
function calculateScore() {
    if (appState.currentTest.mode !== 'exam') return;
    
    appState.score = 0;
    
    appState.currentTest.questions.forEach((question, index) => {
        const userAnswer = appState.userAnswers[index];
        
        if (!userAnswer) return;
        
        if (question.type === 'single') {
            if (userAnswer[0] === question.correct) {
                appState.score++;
            }
        } else if (question.type === 'multiple') {
            const userSorted = [...userAnswer].sort().join('');
            const correctSorted = [...question.correct].sort().join('');
            
            if (userSorted === correctSorted) {
                appState.score++;
            }
        }
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
function saveTestResult(score, percentage, timeSpent) {
    if (appState.currentTest.mode !== 'exam') return;
    
    const result = {
        id: Date.now(),
        userId: appState.userId,
        userName: appState.userName,
        testId: appState.currentTest.id,
        testTitle: appState.currentTest.title,
        score: score,
        total: appState.currentTest.questions.length,
        percentage: percentage,
        timeSpent: timeSpent,
        date: new Date().toISOString(),
        answers: [...appState.userAnswers]
    };
    
    resultsStorage.results.push(result);
    saveResults();
    return result;
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showResults(percentage, timeSpent) {
    const totalQuestions = appState.currentTest.questions.length;
    const correctAnswers = appState.score;
    const minutes = Math.floor(timeSpent / 60);
    const seconds = timeSpent % 60;
    
    document.getElementById('score-percent').textContent = percentage + '%';
    document.getElementById('correct-answers').textContent = correctAnswers;
    document.getElementById('total-questions').textContent = totalQuestions;
    document.getElementById('time-spent').textContent = `${minutes} –º–∏–Ω ${seconds} —Å–µ–∫`;
    document.getElementById('test-title').textContent = appState.currentTest.title;
    
    const scoreCircle = document.getElementById('score-circle');
    scoreCircle.style.setProperty('--progress', percentage + '%');
    
    const resultText = document.getElementById('result-text');
    let message = '';
    
    // –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    if (appState.currentTest.mode === 'tutorial') {
        if (percentage >= 80) {
            message = '–û—Ç–ª–∏—á–Ω–æ! –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª! üéì';
        } else if (percentage >= 60) {
            message = '–•–æ—Ä–æ—à–æ! –í—ã —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å –≤ —Ç–µ–º–µ! üëç';
        } else {
            message = '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üìö';
        }
        message += ' –≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—ã–ª –≤ –æ–±—É—á–∞—é—â–µ–º —Ä–µ–∂–∏–º–µ.';
    } else {
        const scoring = appState.currentTest.scoring || { excellent: 80, good: 60, satisfactory: 40 };
        
        if (percentage >= scoring.excellent) {
            message = '–û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç! üèÜ';
        } else if (percentage >= scoring.good) {
            message = '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª. üëç';
        } else if (percentage >= scoring.satisfactory) {
            message = '–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å. üìö';
        } else {
            message = '–í–∞–º —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ. üí™';
        }
    }
    
    resultText.textContent = message;
    showScreen('result');
}

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
function showAdminPanel() {
    const password = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    if (password === resultsStorage.adminKey) {
        appState.isAdmin = true;
        showScreen('admin');
        updateAdminStats();
    } else {
        alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ
function updateAdminStats() {
    const results = resultsStorage.results;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    document.getElementById('total-tests').textContent = results.length;
    
    const averagePercentage = results.length > 0 ? 
        Math.round(results.reduce((sum, r) => sum + r.percentage, 0) / results.length) : 0;
    document.getElementById('average-score').textContent = averagePercentage + '%';
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º
    const testStats = {};
    const allTests = testLoader.getAllTestsForAdmin();
    allTests.forEach(test => {
        testStats[test.id] = {
            title: test.title,
            count: 0,
            totalPercentage: 0
        };
    });
    
    results.forEach(result => {
        if (testStats[result.testId]) {
            testStats[result.testId].count++;
            testStats[result.testId].totalPercentage += result.percentage;
        }
    });
    
    const testStatsContainer = document.getElementById('test-stats');
    testStatsContainer.innerHTML = '';
    
    Object.values(testStats).forEach(stat => {
        if (stat.count > 0) {
            const avg = Math.round(stat.totalPercentage / stat.count);
            const statElement = document.createElement('div');
            statElement.className = 'test-stat-item';
            statElement.innerHTML = `
                <div class="test-stat-title">${stat.title}</div>
                <div class="test-stat-numbers">
                    <span class="test-stat-count">${stat.count} —Ç–µ—Å—Ç–æ–≤</span>
                    <span class="test-stat-avg">–°—Ä–µ–¥–Ω–∏–π: ${avg}%</span>
                </div>
            `;
            testStatsContainer.appendChild(statElement);
        }
    });
    
    // –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const bestResults = [...results].sort((a, b) => b.percentage - a.percentage).slice(0, 5);
    const bestResultsContainer = document.getElementById('best-results');
    bestResultsContainer.innerHTML = '';
    
    bestResults.forEach((result, index) => {
        const resultElement = document.createElement('div');
        resultElement.className = 'admin-result-item';
        resultElement.innerHTML = `
            <div class="result-rank">${index + 1}</div>
            <div class="result-user">${result.userName}</div>
            <div class="result-test">${result.testTitle}</div>
            <div class="result-score">${result.percentage}%</div>
            <div class="result-date">${new Date(result.date).toLocaleDateString()}</div>
        `;
        bestResultsContainer.appendChild(resultElement);
    });
    
    // –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allResultsContainer = document.getElementById('all-results');
    allResultsContainer.innerHTML = '';
    
    results.forEach((result, index) => {
        const resultElement = document.createElement('div');
        resultElement.className = 'admin-result-item';
        resultElement.innerHTML = `
            <div class="result-rank">${index + 1}</div>
            <div class="result-user">${result.userName}</div>
            <div class="result-test">${result.testTitle}</div>
            <div class="result-score">${result.score}/${result.total} (${result.percentage}%)</div>
            <div class="result-date">${new Date(result.date).toLocaleString()}</div>
        `;
        allResultsContainer.appendChild(resultElement);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function exportResults() {
    const data = JSON.stringify(resultsStorage.results, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `fencing_results_${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
}

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function clearResults() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        resultsStorage.results = [];
        saveResults();
        updateAdminStats();
        alert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!');
    }
}

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
function restartTest() {
    showScreen('test-selection');
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
function shareResult() {
    const percentage = Math.round((appState.score / appState.currentTest.questions.length) * 100);
    
    if (typeof vkBridge !== 'undefined') {
        vkBridge.send('VKWebAppShowWallPostBox', {
            message: `–Ø –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç "${appState.currentTest.title}" –∏ –Ω–∞–±—Ä–∞–ª ${percentage}%! –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —Ç–æ–∂–µ!`
        }).catch(error => {
            alert(`–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—Å—Ç–µ "${appState.currentTest.title}": ${percentage}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!`);
        });
    } else {
        alert(`–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—Å—Ç–µ "${appState.currentTest.title}": ${percentage}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!`);
    }
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenName) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    document.getElementById(screenName + '-screen').classList.add('active');
    appState.currentScreen = screenName;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–∞—Ö
    if (screenName === 'welcome' && appState.currentTest) {
        document.getElementById('welcome-test-title').textContent = appState.currentTest.title;
        document.getElementById('welcome-test-description').textContent = appState.currentTest.description;
        document.getElementById('welcome-test-difficulty').textContent = appState.currentTest.difficulty || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π';
        document.getElementById('welcome-test-duration').textContent = appState.currentTest.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        document.getElementById('welcome-test-questions').textContent = appState.currentTest.questions ? appState.currentTest.questions.length : 0;
        document.getElementById('welcome-test-author').textContent = appState.currentTest.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
    }
    
    // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∫—É, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (screenName === 'admin') {
        updateAdminStats();
    }
    
    // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
    if (screenName === 'test-selection') {
        fillTestSelection();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏
function showTestManagement() {
    if (!appState.isAdmin) {
        alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ—Å—Ç–∞–º–∏!');
        return;
    }
    
    showScreen('test-management');
    updateTestManagement();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏
function updateTestManagement() {
    const customTests = testLoader.getCustomTests();
    const container = document.getElementById('custom-tests-list');
    
    container.innerHTML = '';
    
    if (customTests.length === 0) {
        container.innerHTML = '<div class="empty-state">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</div>';
        return;
    }
    
    customTests.forEach(test => {
        const testElement = document.createElement('div');
        testElement.className = 'test-management-item';
        testElement.innerHTML = `
            <div class="test-management-info">
                <h4>${test.title}</h4>
                <p>${test.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                <div class="test-management-meta">
                    <span>–í–æ–ø—Ä–æ—Å–æ–≤: ${test.questions.length}</span>
                    <span>–†–µ–∂–∏–º: ${test.mode === 'tutorial' ? '–û–±—É—á–∞—é—â–∏–π' : '–≠–∫–∑–∞–º–µ–Ω'}</span>
                    <span>–ó–∞–≥—Ä—É–∂–µ–Ω: ${new Date(test.loadDate).toLocaleDateString()}</span>
                </div>
            </div>
            <div class="test-management-actions">
                <button class="vk-button small" onclick="previewTest('${test.id}')">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                <button class="vk-button small secondary" onclick="editTest('${test.id}')">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button class="vk-button small danger" onclick="deleteTest('${test.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        container.appendChild(testElement);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞ –∏–∑ JSON
function uploadTest() {
    if (!appState.isAdmin) {
        alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–µ—Å—Ç—ã!');
        return;
    }
    
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = '.json';
    
    fileInput.onchange = function(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const testData = JSON.parse(e.target.result);
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                if (!testData.title || !testData.questions || !Array.isArray(testData.questions)) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ—Å—Ç–∞');
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç
                const test = testLoader.addCustomTest(testData);
                alert(`–¢–µ—Å—Ç "${test.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!`);
                updateTestManagement();
                
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞: ' + error.message);
            }
        };
        
        reader.readAsText(file);
    };
    
    fileInput.click();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ URL
function uploadTestFromUrl() {
    if (!appState.isAdmin) {
        alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–µ—Å—Ç—ã!');
        return;
    }
    
    const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL JSON —Ñ–∞–π–ª–∞ —Å —Ç–µ—Å—Ç–æ–º:');
    if (!url) return;
    
    showScreen('loading');
    
    fetch(url)
        .then(response => {
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + response.status);
            return response.json();
        })
        .then(testData => {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if (!testData.title || !testData.questions || !Array.isArray(testData.questions)) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ—Å—Ç–∞');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç
            const test = testLoader.addCustomTest(testData);
            alert(`–¢–µ—Å—Ç "${test.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!`);
            showScreen('test-management');
            updateTestManagement();
        })
        .catch(error => {
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞: ' + error.message);
            showScreen('test-management');
        });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
function createNewTest() {
    if (!appState.isAdmin) {
        alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã!');
        return;
    }
    
    const title = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:');
    if (!title) return;
    
    const description = prompt('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:') || '';
    
    const mode = confirm('–°–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç –æ–±—É—á–∞—é—â–∏–º (—Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏)?') ? 'tutorial' : 'exam';
    
    const newTest = {
        title: title,
        description: description,
        mode: mode,
        questions: [],
        scoring: {
            excellent: 80,
            good: 60,
            satisfactory: 40
        }
    };
    
    const test = testLoader.addCustomTest(newTest);
    editTest(test.id);
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
function editTest(testId) {
    if (!appState.isAdmin) {
        alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã!');
        return;
    }
    
    const test = testLoader.customTests.get(testId);
    if (!test) {
        alert('–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤
    const newTitle = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:', test.title);
    if (newTitle) test.title = newTitle;
    
    const newDescription = prompt('–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:', test.description || '');
    test.description = newDescription;
    
    const newMode = confirm('–°–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç –æ–±—É—á–∞—é—â–∏–º (—Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏)?') ? 'tutorial' : 'exam';
    test.mode = newMode;
    
    testLoader.saveCustomTestsToStorage();
    updateTestManagement();
    alert('–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!');
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞
function previewTest(testId) {
    const test = testLoader.customTests.get(testId);
    if (!test) {
        alert('–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    let previewText = `–ù–∞–∑–≤–∞–Ω–∏–µ: ${test.title}\n`;
    previewText += `–û–ø–∏—Å–∞–Ω–∏–µ: ${test.description || '–Ω–µ—Ç'}\n`;
    previewText += `–†–µ–∂–∏–º: ${test.mode === 'tutorial' ? '–û–±—É—á–∞—é—â–∏–π' : '–≠–∫–∑–∞–º–µ–Ω'}\n`;
    previewText += `–í–æ–ø—Ä–æ—Å–æ–≤: ${test.questions.length}\n\n`;
    
    test.questions.forEach((question, index) => {
        previewText += `–í–æ–ø—Ä–æ—Å ${index + 1}: ${question.question}\n`;
        question.answers.forEach((answer, ansIndex) => {
            previewText += `  ${ansIndex + 1}. ${answer}\n`;
        });
        previewText += `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${Array.isArray(question.correct) ? question.correct.join(', ') : question.correct}\n`;
        if (question.explanation) {
            previewText += `–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: ${question.explanation}\n`;
        }
        previewText += '\n';
    });
    
    alert(previewText);
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
function deleteTest(testId) {
    if (!appState.isAdmin) {
        alert('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–µ—Å—Ç—ã!');
        return;
    }
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç?')) return;
    
    if (testLoader.removeCustomTest(testId)) {
        alert('–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω!');
        updateTestManagement();
    } else {
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞');
    }
}
