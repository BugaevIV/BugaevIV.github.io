// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appState = {
    currentScreen: 'welcome',
    currentQuestion: 0,
    userAnswers: [],
    score: 0,
    startTime: null,
    endTime: null,
    userId: null,
    userName: '–ì–æ—Å—Ç—å'
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ë–î)
let resultsStorage = {
    users: [],
    results: [],
    adminKey: 'fencing2024'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK Bridge
    if (typeof vkBridge !== 'undefined') {
        vkBridge.send('VKWebAppInit');
        getUserInfo();
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ localStorage
    loadResults();
    showScreen('welcome');
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function getUserInfo() {
    if (typeof vkBridge !== 'undefined') {
        vkBridge.send('VKWebAppGetUserInfo')
            .then(userInfo => {
                appState.userId = userInfo.id;
                appState.userName = userInfo.first_name + ' ' + userInfo.last_name;
            })
            .catch(error => {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
                generateGuestId();
            });
    } else {
        generateGuestId();
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –≥–æ—Å—Ç—è
function generateGuestId() {
    appState.userId = 'guest_' + Math.random().toString(36).substr(2, 9);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ localStorage
function loadResults() {
    const saved = localStorage.getItem('fencingTestResults');
    if (saved) {
        resultsStorage = JSON.parse(saved);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ localStorage
function saveResults() {
    localStorage.setItem('fencingTestResults', JSON.stringify(resultsStorage));
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
function saveTestResult(score, percentage, timeSpent) {
    const result = {
        id: Date.now(),
        userId: appState.userId,
        userName: appState.userName,
        score: score,
        total: testQuestions.length,
        percentage: percentage,
        timeSpent: timeSpent,
        date: new Date().toISOString(),
        answers: [...appState.userAnswers]
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingIndex = resultsStorage.results.findIndex(r => r.userId === appState.userId);
    if (existingIndex !== -1) {
        resultsStorage.results[existingIndex] = result;
    } else {
        resultsStorage.results.push(result);
    }
    
    saveResults();
    return result;
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenName) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    document.getElementById(screenName + '-screen').classList.add('active');
    appState.currentScreen = screenName;
    
    // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∫—É, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (screenName === 'admin') {
        updateAdminStats();
    }
}

// –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
function startTest() {
    appState.currentQuestion = 0;
    appState.userAnswers = [];
    appState.score = 0;
    appState.startTime = new Date();
    
    showScreen('test');
    displayQuestion();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
function displayQuestion() {
    const question = testQuestions[appState.currentQuestion];
    const progress = ((appState.currentQuestion) / testQuestions.length) * 100;
    
    document.getElementById('progress-fill').style.width = progress + '%';
    document.getElementById('progress-text').textContent = 
        `${appState.currentQuestion + 1}/${testQuestions.length}`;
    
    document.getElementById('question-text').textContent = question.question;
    
    const answersContainer = document.getElementById('answers-container');
    answersContainer.innerHTML = '';
    
    question.answers.forEach((answer, index) => {
        const answerElement = document.createElement('div');
        answerElement.className = 'answer-option';
        answerElement.innerHTML = `
            <div class="answer-text">${answer}</div>
        `;
        
        answerElement.addEventListener('click', () => selectAnswer(index));
        answersContainer.appendChild(answerElement);
    });
    
    document.getElementById('next-button').disabled = true;
}

// –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
function selectAnswer(answerIndex) {
    const question = testQuestions[appState.currentQuestion];
    const answerOptions = document.querySelectorAll('.answer-option');
    
    answerOptions.forEach(option => {
        option.classList.remove('selected');
    });
    
    answerOptions[answerIndex].classList.add('selected');
    appState.userAnswers[appState.currentQuestion] = [answerIndex];
    document.getElementById('next-button').disabled = false;
}

// –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
function nextQuestion() {
    appState.currentQuestion++;
    
    if (appState.currentQuestion < testQuestions.length) {
        displayQuestion();
    } else {
        finishTest();
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
function finishTest() {
    appState.endTime = new Date();
    calculateScore();
    
    const timeSpent = Math.round((appState.endTime - appState.startTime) / 1000);
    const percentage = Math.round((appState.score / testQuestions.length) * 100);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    saveTestResult(appState.score, percentage, timeSpent);
    showResults(percentage, timeSpent);
}

// –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function calculateScore() {
    appState.score = 0;
    
    testQuestions.forEach((question, index) => {
        const userAnswer = appState.userAnswers[index];
        
        if (!userAnswer) return;
        
        if (question.type === 'single') {
            if (userAnswer[0] === question.correct) {
                appState.score++;
            }
        } else if (question.type === 'multiple') {
            const userSorted = [...userAnswer].sort().join('');
            const correctSorted = [...question.correct].sort().join('');
            
            if (userSorted === correctSorted) {
                appState.score++;
            }
        }
    });
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showResults(percentage, timeSpent) {
    const totalQuestions = testQuestions.length;
    const correctAnswers = appState.score;
    const minutes = Math.floor(timeSpent / 60);
    const seconds = timeSpent % 60;
    
    document.getElementById('score-percent').textContent = percentage + '%';
    document.getElementById('correct-answers').textContent = correctAnswers;
    document.getElementById('total-questions').textContent = totalQuestions;
    document.getElementById('time-spent').textContent = `${minutes} –º–∏–Ω ${seconds} —Å–µ–∫`;
    
    const scoreCircle = document.getElementById('score-circle');
    scoreCircle.style.setProperty('--progress', percentage + '%');
    
    const resultText = document.getElementById('result-text');
    let message = '';
    
    if (percentage >= 90) {
        message = '–û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –∞—Ä—Ç-—Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏–∏! üèÜ';
    } else if (percentage >= 70) {
        message = '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞. üëç';
    } else if (percentage >= 50) {
        message = '–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å. üìö';
    } else {
        message = '–í–∞–º —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ. üí™';
    }
    
    resultText.textContent = message;
    showScreen('result');
}

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
function showAdminPanel() {
    const password = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    if (password === resultsStorage.adminKey) {
        showScreen('admin');
    } else {
        alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ
function updateAdminStats() {
    const results = resultsStorage.results;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    document.getElementById('total-tests').textContent = results.length;
    document.getElementById('average-score').textContent = 
        results.length > 0 ? Math.round(results.reduce((sum, r) => sum + r.percentage, 0) / results.length) + '%' : '0%';
    
    // –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const bestResults = [...results].sort((a, b) => b.percentage - a.percentage).slice(0, 5);
    const bestResultsContainer = document.getElementById('best-results');
    bestResultsContainer.innerHTML = '';
    
    bestResults.forEach((result, index) => {
        const resultElement = document.createElement('div');
        resultElement.className = 'admin-result-item';
        resultElement.innerHTML = `
            <div class="result-rank">${index + 1}</div>
            <div class="result-user">${result.userName}</div>
            <div class="result-score">${result.percentage}%</div>
            <div class="result-date">${new Date(result.date).toLocaleDateString()}</div>
        `;
        bestResultsContainer.appendChild(resultElement);
    });
    
    // –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allResultsContainer = document.getElementById('all-results');
    allResultsContainer.innerHTML = '';
    
    results.forEach((result, index) => {
        const resultElement = document.createElement('div');
        resultElement.className = 'admin-result-item';
        resultElement.innerHTML = `
            <div class="result-rank">${index + 1}</div>
            <div class="result-user">${result.userName}</div>
            <div class="result-score">${result.score}/${result.total} (${result.percentage}%)</div>
            <div class="result-date">${new Date(result.date).toLocaleString()}</div>
        `;
        allResultsContainer.appendChild(resultElement);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function exportResults() {
    const data = JSON.stringify(resultsStorage.results, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `fencing_results_${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
}

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function clearResults() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        resultsStorage.results = [];
        saveResults();
        updateAdminStats();
        alert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!');
    }
}

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
function restartTest() {
    showScreen('welcome');
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
function shareResult() {
    const percentage = Math.round((appState.score / testQuestions.length) * 100);
    
    if (typeof vkBridge !== 'undefined') {
        vkBridge.send('VKWebAppShowWallPostBox', {
            message: `–Ø –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –ø–æ –∞—Ä—Ç-—Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏—é –∏ –Ω–∞–±—Ä–∞–ª ${percentage}%! –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —Ç–æ–∂–µ!`
        }).catch(error => {
            alert(`–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${percentage}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!`);
        });
    } else {
        alert(`–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${percentage}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!`);
    }
}
